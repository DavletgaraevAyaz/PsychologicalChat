@page "/psycho"
@using MudBlazor
@using PsychoChat.Models
@using PsychoChat.Services
@inject ChatService ChatService
@inject NavigationManager Navigation

<MudTheme Provider="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<!-- Синий хедер как на welcome -->
<header class="blue-header">
    <div class="header-content">
        <div class="logo-section">
            <MudIcon Icon="@Icons.Material.Filled.Psychology" 
                    Class="header-logo"/>
            <span class="header-title">Кризис-Менеджер</span>
        </div>
        <MudText Typo="Typo.body2" Class="header-subtitle">
            Анонимная психологическая поддержка
        </MudText>
    </div>
</header>

<main class="main-content">
    @if (_selectedChatId == Guid.Empty)
    {
        <!-- Выбор психолога - синяя секция -->
        <section class="blue-section">
            <div class="section-content">
                <div class="psychologists-container">
                    <div class="psychologists-header">
                        <MudText Typo="Typo.h4" Class="section-title" Color="Color.Inherit">
                            Выберите психолога
                        </MudText>
                        <MudText Typo="Typo.body1" Class="section-subtitle">
                            Наши специалисты готовы помочь вам анонимно и конфиденциально
                        </MudText>
                    </div>

                    <div class="psychologists-grid">
                        @foreach (var psychologist in _psychologists)
                        {
                            <MudCard Class="psychologist-card" 
                                    Hover="true">
                                <MudCardContent Class="card-content">
                                    <div class="psychologist-main" @onclick="() => SelectPsychologist(psychologist.Id)">
                                        <div class="avatar-container">
                                            <div class="psychologist-avatar @(psychologist.IsOnline ? "online" : "offline")">
                                                <MudIcon Icon="@Icons.Material.Filled.Person" 
                                                        Size="Size.Large"
                                                        Color="Color.Primary"/>
                                            </div>
                                            <div class="status-dot @(psychologist.IsOnline ? "online" : "offline")"></div>
                                        </div>
                                        
                                        <div class="psychologist-info">
                                            <MudText Typo="Typo.h6" Class="name">
                                                @psychologist.PsychologistName
                                            </MudText>
                                            <MudText Typo="Typo.body2" Class="specialization">
                                                @psychologist.PsychologistSpecialization
                                            </MudText>
                                        </div>
                                    </div>

                                    <div class="psychologist-footer">
                                        @* <MudChip Color="@(psychologist.IsOnline ? Color.Success : Color.Default)" 
                                                Variant="Variant.Filled" 
                                                Size="Size.Small"
                                                Class="status-chip">
                                            @(psychologist.IsOnline ? "Online" : "Offline")
                                        </MudChip> *@
                                        <MudButton Variant="Variant.Outlined"
                                                  Color="Color.Primary"
                                                  Size="Size.Small"
                                                  EndIcon="@Icons.Material.Filled.Chat"
                                                  Class="chat-button"
                                                  OnClick="() => SelectPsychologist(psychologist.Id)">
                                            Начать чат
                                        </MudButton>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                </div>
            </div>
        </section>
    }
    else
    {
        <!-- Чат с выбранным психологом - белая секция -->
        <section class="white-section">
            <div class="chat-container">
                <MudPaper Class="chat-paper" Elevation="2">
                    <!-- Заголовок чата -->
                    <div class="chat-header">
                        <div class="chat-info">
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                                          Color="Color.Inherit"
                                          OnClick="ReturnToPsychologists"
                                          Class="back-button"/>
                            
                            <div class="partner-info">
                                <div class="partner-avatar @(_currentPsychologist?.IsOnline == true ? "online" : "offline")">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" 
                                            Color="Color.Primary"/>
                                </div>
                                <div>
                                    <MudText Typo="Typo.h6" Class="partner-name">
                                        @_currentPsychologist?.PsychologistName
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @_currentPsychologist?.PsychologistSpecialization
                                    </MudText>
                                </div>
                            </div>
                        </div>
                    </div>

                    <MudDivider/>

                    <!-- Область сообщений -->
                    <div class="messages-container" @ref="_messagesContainer">
                        @if (_messages.Any())
                        {
                            @foreach (var message in _messages)
                            {
                                <div class="@($"message {(message.Sender == "user" ? "message-user" : "message-psychologist")}")">
                                    <div class="message-bubble">
                                        <div class="message-text">@message.Message</div>
                                        <div class="message-time">
                                            @message.Timestamp.ToString("HH:mm")
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-chat">
                                <MudIcon Icon="@Icons.Material.Filled.Chat" 
                                        Size="Size.Large" 
                                        Color="Color.Secondary"/>
                                <MudText Typo="Typo.h6" Color="Color.Secondary">
                                    Начните conversation
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Отправьте первое сообщение психологу
                                </MudText>
                            </div>
                        }
                    </div>

                    <!-- Поле ввода -->
                    <div class="message-input-container">
                        <MudTextField @bind-Value="_newMessage"
                                     Variant="Variant.Outlined"
                                     Placeholder="Напишите сообщение..."
                                     FullWidth="true"
                                     Adornment="@Adornment.End"
                                     AdornmentIcon="@Icons.Material.Filled.Send"
                                     OnAdornmentClick="SendMessage"
                                     OnKeyDown="HandleKeyDown"
                                     Class="message-input"/>
                    </div>
                </MudPaper>
            </div>
        </section>
    }
</main>

<style>
    /* Общие стили */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* Синий хедер */
    .blue-header {
        background: linear-gradient(135deg, #1565c0 0%, #1976d2 100%);
        padding: 1.5rem 0;
        color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo-section {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .header-logo {
        font-size: 2rem !important;
        color: white !important;
    }

    .header-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: white;
    }

    .header-subtitle {
        color: rgba(255, 255, 255, 0.9) !important;
    }

    /* Основной контент */
    .main-content {
        min-height: calc(100vh - 80px);
    }

    /* Синяя секция - выбор психолога */
    .blue-section {
        background: linear-gradient(135deg, #1976d2 0%, #42a5f5 100%);
        padding: 3rem 0;
        min-height: calc(100vh - 80px);
        color: white;
    }

    .section-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .psychologists-container {
        text-align: center;
    }

    .psychologists-header {
        margin-bottom: 3rem;
    }

    .section-title {
        font-weight: 700 !important;
        margin-bottom: 1rem !important;
        color: white !important;
    }

    .section-subtitle {
        color: rgba(255, 255, 255, 0.9) !important;
        max-width: 600px;
        margin: 0 auto;
    }

    .psychologists-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .psychologist-card {
        background: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 16px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .psychologist-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.3);
    }

    .card-content {
        padding: 2rem !important;
    }

    .psychologist-main {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        cursor: pointer;
    }

    .psychologist-main:hover {
        opacity: 0.9;
    }

    .avatar-container {
        position: relative;
    }

    .psychologist-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s ease;
    }

    .psychologist-main:hover .psychologist-avatar {
        transform: scale(1.05);
    }

    .status-dot {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 14px;
        height: 14px;
        border: 2px solid white;
        border-radius: 50%;
    }

    .status-dot.online {
        background-color: #4caf50;
    }

    .status-dot.offline {
        background-color: #9e9e9e;
    }

    .psychologist-info {
        text-align: left;
        flex: 1;
    }

    .name {
        color: white !important;
        font-weight: 600 !important;
        margin-bottom: 0.5rem !important;
    }

    .specialization {
        color: rgba(255, 255, 255, 0.8) !important;
    }

    .psychologist-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .status-chip {
        background: rgba(255, 255, 255, 0.2) !important;
        color: white !important;
        border: none !important;
    }

    .chat-button {
        border-color: white !important;
        color: white !important;
        transition: all 0.2s ease;
    }

    .chat-button:hover {
        background: rgba(255, 255, 255, 0.1) !important;
        transform: translateY(-1px);
    }

    /* Белая секция - чат */
    .white-section {
        background: white;
        padding: 2rem 0;
        min-height: calc(100vh - 80px);
    }

    .chat-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 0 2rem;
        height: calc(100vh - 180px);
    }

    .chat-paper {
        height: 100%;
        display: flex;
        flex-direction: column;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    }

    .chat-header {
        padding: 1.5rem 2rem;
        background: linear-gradient(135deg, #1976d2 0%, #42a5f5 100%);
        color: white;
    }

    .chat-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .back-button {
        color: white !important;
        transition: transform 0.2s ease;
    }

    .back-button:hover {
        transform: scale(1.1);
    }

    .partner-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .partner-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .partner-avatar::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border: 2px solid white;
        border-radius: 50%;
    }

    .partner-avatar.online::after {
        background-color: #4caf50;
    }

    .partner-avatar.offline::after {
        background-color: #9e9e9e;
    }

    .partner-name {
        color: white !important;
        margin-bottom: 0.25rem !important;
    }

    .messages-container {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        background: #f8f9fa;
    }

    .empty-chat {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: #666;
    }

    .message {
        display: flex;
        max-width: 70%;
        animation: messageAppear 0.3s ease;
    }

    .message-user {
        align-self: flex-end;
        margin-left: auto;
    }

    .message-psychologist {
        align-self: flex-start;
    }

    .message-bubble {
        padding: 1rem 1.25rem;
        border-radius: 18px;
        position: relative;
    }

    .message-user .message-bubble {
        background: linear-gradient(135deg, #1976d2, #42a5f5);
        color: white;
        border-bottom-right-radius: 6px;
    }

    .message-psychologist .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e0e0e0;
        border-bottom-left-radius: 6px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .message-text {
        margin-bottom: 0.5rem;
        line-height: 1.5;
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        text-align: right;
    }

    .message-psychologist .message-time {
        text-align: left;
    }

    .message-input-container {
        padding: 1.5rem 2rem;
        background: white;
        border-top: 1px solid #e0e0e0;
    }

    .message-input {
        background: #f8f9fa;
        border-radius: 12px;
    }

    /* Анимации */
    @@keyframes messageAppear {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Адаптивность */
    @@media (max-width: 968px) {
        .psychologists-grid {
            grid-template-columns: 1fr;
        }
        
        .header-content {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
    }

    @@media (max-width: 768px) {
        .header-content,
        .section-content,
        .chat-container {
            padding: 0 1rem;
        }
        
        .blue-header {
            padding: 1rem 0;
        }
        
        .blue-section {
            padding: 2rem 0;
        }
        
        .psychologist-card {
            margin: 0 0.5rem;
        }
        
        .card-content {
            padding: 1.5rem !important;
        }
        
        .chat-header {
            padding: 1rem 1.5rem;
        }
        
        .messages-container {
            padding: 1.5rem;
        }
        
        .message-input-container {
            padding: 1rem 1.5rem;
        }
        
        .message {
            max-width: 85%;
        }
    }

    @@media (max-width: 480px) {
        .header-title {
            font-size: 1.25rem;
        }
        
        .header-subtitle {
            display: none;
        }
        
        .psychologist-main {
            flex-direction: column;
            text-align: center;
        }
        
        .psychologist-info {
            text-align: center;
        }
        
        .psychologist-footer {
            flex-direction: column;
            gap: 1rem;
        }
        
        .partner-info {
            flex-direction: column;
            text-align: center;
            gap: 0.5rem;
        }
        
        .chat-button {
            width: 100%;
        }
    }
</style>

@code {
    private List<ChatSession> _psychologists = new();
    private Guid _selectedChatId = Guid.Empty;
    private ChatSession? _currentPsychologist;
    private List<ChatMessage> _messages = new();
    private string _newMessage = string.Empty;
    private ElementReference _messagesContainer;

    protected override void OnInitialized()
    {
        _psychologists = ChatService.GetAvailablePsychologists();
        ChatService.OnNewMessage += HandleNewMessage;
    }

    private void SelectPsychologist(Guid psychologistId)
    {
        _selectedChatId = psychologistId;
        _currentPsychologist = _psychologists.FirstOrDefault(p => p.Id == psychologistId);
        _messages = ChatService.GetChatHistory(psychologistId);
        ScrollToBottom();
        
        // Прокручиваем к верху страницы при переходе в чат
        Navigation.NavigateTo("#", true);
    }

    private void ReturnToPsychologists()
    {
        _selectedChatId = Guid.Empty;
        _currentPsychologist = null;
        _messages.Clear();
        _newMessage = string.Empty;
    }

    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage))
            return;

        ChatService.SendMessage(_selectedChatId, _newMessage);
        _messages.Add(new ChatMessage
        {
            Id = Guid.NewGuid(),
            ChatId = _selectedChatId,
            Sender = "user",
            Message = _newMessage,
            Timestamp = DateTime.Now,
            IsRead = true
        });

        _newMessage = string.Empty;
        ScrollToBottom();
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            SendMessage();
        }
    }

    private void HandleNewMessage(ChatMessage message)
    {
        if (message.ChatId == _selectedChatId)
        {
            _messages.Add(message);
            ScrollToBottom();
            StateHasChanged();
        }
    }

    private async void ScrollToBottom()
    {
        await Task.Delay(100);
        try
        {
            // await _messagesContainer.ScrollIntoViewAsync();
        }
        catch
        {
            // Игнорируем ошибки скролла
        }
    }

    public void Dispose()
    {
        ChatService.OnNewMessage -= HandleNewMessage;
    }
}