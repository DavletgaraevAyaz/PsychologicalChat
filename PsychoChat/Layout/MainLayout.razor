@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using PsychoChat.Services
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService AuthService
@inject NavigationManager Navigation

<MudTheme Provider="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    @* @if (isAuthenticated)
    {
        <MudAppBar Elevation="4" Color="Color.Primary">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
            <MudText Typo="Typo.h6" Class="ml-3">Кризис-Менеджер</MudText>
            <MudSpacer/>
            <MudText>Добро пожаловать, @userEmail!</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="Logout"/>
        </MudAppBar>

        <MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <MudNavMenu>
                @if (userRole == "Student")
                {
                    <MudNavLink Href="/chat" Icon="@Icons.Material.Filled.Chat">Анонимный чат</MudNavLink>
                    <MudNavLink Href="/mood" Icon="@Icons.Material.Filled.Mood">Трекер настроения</MudNavLink>
                    <MudNavLink Href="/specialists" Icon="@Icons.Material.Filled.People">Специалисты</MudNavLink>
                }
                else if (userRole == "Psychologist")
                {
                    <MudNavLink Href="/chat-dashboard" Icon="@Icons.Material.Filled.Forum">Чат поддержки</MudNavLink>
                    <MudNavLink Href="/patients" Icon="@Icons.Material.Filled.Group">Мои пациенты</MudNavLink>
                }
            </MudNavMenu>
        </MudDrawer>
    } *@

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="py-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool drawerOpen = true;
    private bool isAuthenticated = false;
    private string userRole = string.Empty;
    private string userEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        userRole = authState.User.FindFirst(ClaimTypes.Role)?.Value ?? "";
        userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value ?? "";
        
        // Подписываемся на изменения аутентификации
        ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationChanged();
    }

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }

    private async void Logout()
    {
        await AuthService.LogoutAsync();
        ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationChanged();
        Navigation.NavigateTo("/login", true);
    }
}